Online Judge High Level Design.
MERN STACK .

database : mongodb atlas through mongoose ODM.

    online-judge Database : 3 collections.
      1. userSchema = new mongoose.Schema({
                  name: String,

                  name: { type: String, required: true }, // unique
                  password: {
                     type: String,
                     required: true,
                  }, // hashed
                  email: {
                     type: String,
                     required: true,
                  },
                  isAdmin: { type: Boolean, default: false },
                  questionsSolved: {
                     type: Number,
                     default: 0,
                  },
                  isGoogle: {
                     type: Boolean,
                  },
                  tokenId: String,
                  submittedProblems: {
                     type: [mongoose.Schema.Types.Mixed],
                     //  submittedCodeId :
                     //  language  :
                     //  solved   :  true or false.
                     //  problemId : _id of problem
                  },
                  attemptedProblems: {
                     type: Number,
                     default: 0,
                  },
                  solvedProblems: {
                     type: Number,
                     default: 0,
                  },
                  hardCount: {
                     type: Number,
                     default: 0,
                  },

                  easyCount: {
                     type: Number,
                     default: 0,
                  },
                  mediumCount: {
                     type: Number,
                     default: 0,
                  },
                  });
      2.const problemSchema = new mongoose.Schema({

               id: {
               type: String,
               unique: true,
               },
               title: String,
               description: String,

               constraints: String,

               sampleInput: [String],
               sampleOutput: [String],
               explanation: String,
               difficulty: String,

               testcases: [String],
               answers: [String],
               createdAt: Date,
               });

Questions - Control Flow :

Assuming user is already logged in Currently.

1. user From UI will send a request to get all the problems.
   1.1 An api call will be made to the server to get list of Problems.

   1.2 Server will get problems from the database and send it to the user.
   1.3 user will be shown all the problems (Only titles), difficulty wise (hard to easy) or (easy to hard).

2. user from UI will send a request to get a particular problem.

   2.1 An api call {req :{ problem.\_id} } for this route will be triggered to get this problem from backend.

   2.2 server retrieves this problem info from mongoDB and sends to UI.

   2.3 user can see whole problem and user can select the language which he/she is going to code.

   2.3.1 user can submit a coded file from his/her storage.
   2.3.2 Or a user can code the code in website itself. this code also will be changed to a file , before sending to server.
   2.3.2 On submit this {file, language,problem.\_id,user.\_id} will be sent to server through api call .
   2.3.3 first , this file will be saved at server side in a folder and this file path in that folder will
   stored in mongodb "user-code-files" collection with all other requred data.
   2.3.4 second , this file will be compiled .
   2.3.5 using the compiled code + testcases for this problem , output will be generated .
   2.3.6 use this generated output and Valid answer output present in problems collection to compare and
   get the verdict.
   2.3.7 store this verdict in mongodb in the same doc.
   2.3.8 send this whole doc to UI/frontend .
   2.3.9 Verdict will be display on UI.

Time needed:

frontend-compononets :

0. React Routing setup for all components : 1 day.

1.Login and signUp Page :
design : 6 hrs.
code : 2-3 hrs.

2. User-Profile component.
   design : 1 hr.
   code : 2-3 hrs

3. All-Questions Component.
   design : 1 day (from various already there components).
   code : 1 day.

4. Particular question Component.
   design : 1 day.
   code : 1 day.

5. Code Editor Component.
   design : 1-2 hrs
   code : 1-2 hrs.

Server-Side :

1. mongodb database creation : 1 day. considering to check the validity of data into database.
2. API End point Routes BASE STRUCTURE : 1 day.
3. Implementing functionality for apprioriate routes : 1 week
   3.1 user login , signup, logout ,profile : 2-3 days .
   3.2 Functionality to get all problems : 2-3 hrs.
   3.3 Functionality to get a particular problem : 2-3 hrs.
   3.4 Functionality to submit ,verify and produce a verdict for a code file using compilers provided by packaged: 2-3 days.
   3.5 writing functionality for admin routes : 1 day.

4. Testing and debugging : 1 week.

Development Time : 3 weeks.

Development FLow :

1. First i will create a basic react app with routing and basic components.
2. Then i will create a basic server with routes and database wihtout any functionality.

3. Now i will create a UI for login and signup page.
4. Then i will create a UI for user profile page.
5. Then i will create a UI for all questions page.
6. Then i will create a UI for particular question page.
7. Then i will create a UI for code editor(includes submit file option) page.

8. after frontend completion , i will start working on backend functionality on individual routes.

9. after backend completion , i will start working on testing and debugging.
