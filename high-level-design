Online Judge High Level Design.
MERN STACK .

database : mongodb atlas through mongoose ODM.

    online-judge Database : 3 collections.
      1. users:
          {
            _id: ObjectId,// generated by mongodb
            name: String,
            email: String, // unique
            password: String, // hashed
            isAdmin: Boolean,
            questionsSolved: {
                type: Number,
                default:0
            }

          }
      2. problems:
      {
        _id: ObjectId,// generated by mongodb
        title: String, // unique
        description: String,


        constraints: String,

        sampleInput: String,
        sampleOutput: String,
        explanation: String,
        difficulty: String,
        tags: [String],
        testcases: [String],
        answers: [String],

        createdAt: Date,

      }

      3. user-code-files:
      {
        _id: ObjectId,// generated by mongodb
        userId: ObjectId, // reference to users collection
        problemId: ObjectId, // reference to problems collection
        codePath: String, // path to the code file in server directory. for now i am assuming i am going to use multer.
        language: String,
        verdict: String,
        time: Number,
        memory: Number,
        createdAt: Date,
        updatedAt: Date,
      }

Questions - Control Flow :

Assuming user is already logged in Currently.

1. user From UI will send a request to get all the problems.
   1.1 An api call will be made to the server to get list of Problems.

   1.2 Server will get problems from the database and send it to the user.
   1.3 user will be shown all the problems (Only titles), difficulty wise (hard to easy) or (easy to hard).

2. user from UI will send a request to get a particular problem.

   2.1 An api call {req :{ problem.\_id} } for this route will be triggered to get this problem from backend.

   2.2 server retrieves this problem info from mongoDB and sends to UI.

   2.3 user can see whole problem and user can select the language which he/she is going to code.

   2.3.1 user can submit a coded file from his/her storage.
   2.3.2 Or a user can code the code in website itself. this code also will be changed to a file , before sending to server.
   2.3.2 On submit this {file, language,problem.\_id,user.\_id} will be sent to server through api call .
   2.3.3 first , this file will be saved at server side in a folder and this file path in that folder will
   stored in mongodb "user-code-files" collection with all other requred data.
   2.3.4 second , this file will be compiled .
   2.3.5 using the compiled code + testcases for this problem , output will be generated .
   2.3.6 use this generated output and Valid answer output present in problems collection to compare and
   get the verdict.
   2.3.7 store this verdict in mongodb in the same doc.
   2.3.8 send this whole doc to UI/frontend .
   2.3.9 Verdict will be display on UI.

frontend-compononets :

1.Login and signUp Page.

2. User-Profile component.

3. All-Questions Component.

4. Particular question Component.

5. Code Editor Component.
